# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.fineract.enabled }}
apiVersion: v1
kind: Service
metadata:
#  labels:
#    app: fineract-server
  name: fineract-server-srv
#  annotations:
#    cloud.google.com/neg: '{"ingress": true}'
spec:
  ports:
    - name: 443-8080
      protocol: TCP
      port: <CONTAINER_PORT>
      targetPort: <FINERACT_SERVER_PORT>
  selector:
    app: fineract-server
#    tier: backend
  type: NodePort
#  loadBalancerIP: 34.45.178.100
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fineract-server
  labels:
    app: fineract-server
spec:
  selector:
    matchLabels:
      app: fineract-server
      tier: backend
  strategy:
    type: Recreate
  template: 
    metadata:
      labels:
        app: fineract-server
        tier: backend
    spec:
#      serviceAccountName: cloudsql-ksa
      containers: 
      - name: fineract-server
        image: "{{ .Values.fineract.image }}"
        imagePullPolicy: Always
      imagePullSecrets:
      - name: ocirsecret
        resources:
          limits:
            cpu: "{{ .Values.fineract.resources.limits.cpu }}"
            memory: "{{ .Values.fineract.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.fineract.resources.requests.cpu }}"
            memory: "{{ .Values.fineract.resources.requests.memory }}"
        livenessProbe:
          httpGet:
            path: /fineract-provider/actuator/health/liveness
            port: <FINERACT_SERVER_PORT>
          initialDelaySeconds: 720
          periodSeconds: 1
        readinessProbe:
          httpGet:
            path: /fineract-provider/actuator/health/readiness
            port: <FINERACT_SERVER_PORT>
          initialDelaySeconds: 360
          periodSeconds: 1
        env:
          - name: FINERACT_SERVER_PORT
            value: <FINERACT_SERVER_PORT>
          - name: FINERACT_NODE_ID
            value: <FINERACT_NODE_ID>
          - name: FINERACT_HIKARI_DRIVER_CLASS_NAME
            value: <FINERACT_HIKARI_DRIVER_CLASS_NAME>
          - name: FINERACT_HIKARI_JDBC_URL
            value: jdbc:mysql://<FINERACT_DEFAULT_TENANTDB_HOSTNAME>:<FINERACT_DEFAULT_TENANTDB_PORT>/fineract_tenants?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&sessionVariables=time_zone='-00:00'
          - name: FINERACT_HIKARI_USERNAME
            value: <FINERACT_HIKARI_USERNAME>
#            valueFrom:
#              secretKeyRef:
#                name: fineract-tenants-db-secret
#                key: username
          - name: FINERACT_HIKARI_PASSWORD
            value: <FINERACT_HIKARI_PASSWORD>
#            valueFrom:
#              secretKeyRef:
#                name: fineract-tenants-db-secret
#                key: password
          - name: FINERACT_DEFAULT_TENANTDB_HOSTNAME
            value: <FINERACT_DEFAULT_TENANTDB_HOSTNAME>
          - name: FINERACT_DEFAULT_TENANTDB_PORT
            value: <FINERACT_DEFAULT_TENANTDB_PORT>
          - name: FINERACT_DEFAULT_TENANTDB_IDENTIFIER
            value: <FINERACT_DEFAULT_TENANTDB_IDENTIFIER>
          - name: FINERACT_DEFAULT_TENANTDB_NAME
            value: <FINERACT_DEFAULT_TENANTDB_NAME>
          - name: FINERACT_DEFAULT_TENANTDB_UID
            value: <FINERACT_DEFAULT_TENANTDB_UID>
#            valueFrom:
#              secretKeyRef:
#                name: fineract-tenants-db-secret
#                key: username
          - name: FINERACT_DEFAULT_TENANTDB_PWD
            value: <FINERACT_DEFAULT_TENANTDB_PWD>
#            valueFrom:
#              secretKeyRef:
#                name: fineract-tenants-db-secret
#                key: password
          - name: FINERACT_DEFAULT_TENANTDB_CONN_PARAMS
            value: ''
          - name: "FINERACT_SECURITY_BASICAUTH_ENABLED"
            value: 'true'
          - name: "FINERACT_SECURITY_OAUTH_ENABLED"
            value: 'false'
        ports:
          - containerPort: <FINERACT_SERVER_PORT>
            name: fineract-server
        lifecycle:
          preStop:
            exec:
              command: ['sh', '-c', '{{ .Values.fineract.preStopScript}}']
#      - name: cloud-sql-proxy
#        # It is recommended to use the latest version of the Cloud SQL Auth Proxy
#        # Make sure to update on a regular schedule!
#        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4
#        args:
#          # If connecting from a VPC-native GKE cluster, you can use the
#          # following flag to have the proxy connect over private IP
#          # - "--private-ip"
#
#          # Enable structured logging with LogEntry format:
#          - "--structured-logs"
#
#          # Replace DB_PORT with the port the proxy should listen on
#          - "--port=3306"
#          - "mali-434814:us-central1:mali-instance-dbfb2e8d"
#
#        securityContext:
#          # The default Cloud SQL Auth Proxy image runs as the
#          # "nonroot" user and group (uid: 65532) by default.
#          runAsNonRoot: true
#        # You should use resource requests/limits as a best practice to prevent
#        # pods from consuming too many resources and affecting the execution of
#        # other pods. You should adjust the following values based on what your
#        # application needs. For details, see
#        # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
#        resources:
#          requests:
#            # The proxy's memory use scales linearly with the number of active
#            # connections. Fewer open connections will use less memory. Adjust
#            # this value based on your application's requirements.
#            memory: "64Mi"
#            # The proxy's CPU use scales linearly with the amount of IO between
#            # the database and the application. Adjust this value based on your
#            # application's requirements.
#            cpu:    "50m"
#          limits:
#            memory: "128Mi"
#            cpu: "100m"
#        volumeMounts:
#          - name: cloudsql-instance-credentials
#            mountPath: /secrets/cloudsql
#            readOnly: true
#          - name: mysql-initdb
#            mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: fineract-tenants-db-secret
        - name: mysql-initdb
          configMap:
            name: mysql-preload-data-config
# [END cloud_sql_proxy_k8s_container]

---
{{- if .Values.fineract.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fineract-ingress
  annotations:
{{- if .Values.fineract.ingress.annotations }}
{{ toYaml .Values.fineract.ingress.annotations | indent 4 }}
{{- end }}
spec:
  rules:
    - host: "{{ .Values.fineract.ingress.hostname }}"
      http:
        paths:
          - path: "{{ .Values.fineract.ingress.path }}"
            pathType: Prefix
            backend:
              service:
                name: fineract-server
                port: 
                  number: <CONTAINER_PORT>
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: fineract-tenants-db-secret
type: Opaque
data:
  username: "cm9vdA=="
  password: "RjFuMzdAY3RWdW40JA=="
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-preload-data-config
  labels:
    name: mysql-data-store
    app: mysql-gke-deployment
  #namespace: development
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS `kemetx_tenants`;
    CREATE DATABASE IF NOT EXISTS `kemetx_default`;
    GRANT ALL ON *.* TO 'root'@'%';
    GRANT ALL PRIVILEGES ON `fineract_tenants`.* TO 'mifos';
    GRANT ALL PRIVILEGES ON `fineract_default`.* TO 'mifos';
#---
#apiVersion: networking.gke.io/v1
#kind: ManagedCertificate
#metadata:
#  name: fin-managed-ssl-certificate-dbfb2e8d
##  namespace: paymenthub-back-end
#spec:
# domains:
#  - api.vuna.io

#---
#apiVersion: v1
#kind: Secret
#metadata:
#  name: ocirsecret
#  annotations:
#    meta.helm.sh/release-name: "ph-ee-backend"  # Adjust this as per your release name
#    meta.helm.sh/release-namespace: "paymenthub-ns"  # Adjust this as per your namespace
#  labels:
#    app.kubernetes.io/managed-by: "Helm"
#type: Opaque
#data:
#  docker-server: "bGhyLm9jaXIuaW8="
#  docker-username: "bHJiY2tnNWFjdWd2L2FsZXhAdnVuYS5pbw=="
#  docker-password: "anBlU1ldZWUwTVA6WGloK11BOV8="
#  docker-email: "YWxleEB2dW5hLmlv"


{{- end }}