name: OCI CI/CD

on:
  push:
    branches: ["ekesha-dev"]
#    paths:
#      - app/**
#  workflow_dispatch:
env:
  IMAGE: 'paymenthub-registry'

jobs:
  build:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: ubuntu-latest
    environment: 'dev'
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: gradle

#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#        with:
#          install: true
      - name: 'Install OCI CLI'
        run: |
          mkdir ~/.oci
          echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
          echo "${{ secrets.OCI_KEY_FILE }}" > ~/.oci/key.pem
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      - name: 'Install kubectl'
        run: |
          mkdir /tmp/.kube
          curl -L -O "https://dl.k8s.io/release/v1.22.4/bin/linux/amd64/kubectl" -o kubectl
          chmod +x kubectl
          mv kubectl /usr/local/bin
          echo "${{ secrets.KUBECONFIG }}" > /tmp/.kube/config
          echo "KUBECONFIG=/tmp/.kube/config" >> $GITHUB_ENV

      - name: 'Currently running services'
        run: kubectl -n paymenthub-ns get pods

      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_URL }}
          username: ${{ secrets.OCI_DOCKERHUB_USERNAME }}
          password: ${{ secrets.OCI_DOCKERHUB_PASSWORD }}

#      - name: Available platforms
#        run: echo ${{ steps.buildx.outputs.platforms }}

#      - name: Build
#        run: |
#          docker build --push --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_URL }}/${{ secrets.DOCKER_OBJECT_STORAGE_NAMESPACE }}/free-kubernetes-nginx:latest app/.
          # Build the Docker image
      - name: Build the image
        run: ./gradlew --no-daemon --console=plain :fineract-provider:clean :fineract-provider:compileJava :fineract-provider:jibDockerBuild -x test -x cucumber
        env:
#          GAR_LOCATION: ${{ env.GAR_LOCATION }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
#          PROJECT_ID: ${{ env.PROJECT_ID }}
#          REPOSITORY: ${{ env.REPOSITORY }}
          DOCKER_URL: ${{ secrets.DOCKER_URL }}
          DOSN: ${{ secrets.DOCKER_OBJECT_STORAGE_NAMESPACE }}
          IMAGE: ${{ env.IMAGE }}

        # Push the Docker image to OCI Container Registry
      - name: 'Publish'
        run: |-
          docker push "${{ secrets.DOCKER_URL }}/${{ secrets.DOCKER_OBJECT_STORAGE_NAMESPACE }}/$IMAGE:$GITHUB_SHA"
          docker push "${{ secrets.DOCKER_URL }}/${{ secrets.DOCKER_OBJECT_STORAGE_NAMESPACE }}/$IMAGE:latest"

        # Deploy the Docker image to the GKE cluster
      - name: 'Deploy to K8S'
        run: |
          helm repo add camunda-platform https://helm.camunda.io
          helm repo add elastic http://helm.elastic.co
          helm repo add kibana http://helm.elastic.co
          helm repo add mysql https://charts.bitnami.com/bitnami
          helm repo add kong https://charts.konghq.com
          helm repo add keycloak https://codecentric.github.io/helm-charts
          helm repo add redis https://charts.bitnami.com/bitnami
               
          helm repo update
          
          helm upgrade \
           --set fineract.image="${{ secrets.DOCKER_URL }}/${{ secrets.DOCKER_OBJECT_STORAGE_NAMESPACE }}/$IMAGE:latest" \
           --set fineract.env.FINERACT_SERVER_PORT="${{ secrets.FINERACT_SERVER_PORT }}" \
           --set fineract.env.FINERACT_NODE_ID="${{ secrets.FINERACT_NODE_ID }}" \
           --set fineract.env.FINERACT_HIKARI_DRIVER_CLASS_NAME="${{ secrets.FINERACT_HIKARI_DRIVER_CLASS_NAME }}" \
           --set fineract.env.FINERACT_HIKARI_JDBC_URL="${{ secrets.FINERACT_HIKARI_JDBC_URL }}" \
           --set fineract.env.FINERACT_DEFAULT_TENANTDB_HOSTNAME="${{ secrets.FINERACT_DEFAULT_TENANTDB_HOSTNAME }}" \
           --set fineract.env.FINERACT_DEFAULT_TENANTDB_PORT="${{ secrets.FINERACT_DEFAULT_TENANTDB_PORT }}" \
           --set fineract.env.CONTAINER_PORT="${{ secrets.CONTAINER_PORT }}" \
           --set fineract.env.FINERACT_DEFAULT_TENANTDB_IDENTIFIER="${{ secrets.FINERACT_DEFAULT_TENANTDB_IDENTIFIER }}" \
           --set fineract.env.FINERACT_DEFAULT_TENANTDB_NAME="${{ secrets.FINERACT_DEFAULT_TENANTDB_NAME }}" \
           --set fineract.env.FINERACT_DEFAULT_TENANTDB_PWD="${{ secrets.FINERACT_HIKARI_PASSWORD }}" \
           --set fineract.env.FINERACT_HIKARI_PASSWORD="${{ secrets.FINERACT_HIKARI_PASSWORD }}" \
           --set fineract.env.FINERACT_HIKARI_USERNAME="${{ secrets.FINERACT_HIKARI_USERNAME }}" \
           --set fineract.env.FINERACT_ADMIN_USERNAME="${{ secrets.FINERACT_HIKARI_USERNAME }}" \
           -f helm/values.yaml ph-ee-backend helm/ \
           --install --namespace "${{ secrets.NAMESPACE }}"