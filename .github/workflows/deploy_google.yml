# This workflow will build a docker container, publish it to Google Container
# Registry, and deploy it to GKE when there is a push to the "ekesha-dev"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: 'Build and Deploy to GKE'

on:
  push:
    branches: ["ekesha-dev"]

env:
  PROJECT_ID: ${{ secrets.EKESHA_GKE_PROJECT }} 
  GAR_LOCATION: 'us-central1'
  GKE_CLUSTER: 'fineract-cluster-4bdf2076' 
  #GKE_ZONE: 'us-central1-c' 
  DEPLOYMENT_NAME: 'Ekesha-dev'
  REPOSITORY: 'mali-fineract-4bdf2076'
  IMAGE: 'ekesha-fineract'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/mali-434814/locations/global/workloadIdentityPools/ekesha-dev-pool/providers/ekesha-provider' # TODO: update to your workload identity provider
  NAMESPACE: 'paymenthub-back-end-4bdf2076'
  
jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'dev'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: gradle

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: 'mali-gke@mali-434814.iam.gserviceaccount.com'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker configuration'
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
        
      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_LOCATION }}'

      # Build the Docker image
      - name: Build the image
        run: ./gradlew --no-daemon --console=plain :fineract-provider:clean :fineract-provider:compileJava :fineract-provider:jibDockerBuild -x test -x cucumber
        env:
          GAR_LOCATION: ${{ env.GAR_LOCATION }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE: ${{ env.IMAGE }}

      # Push the Docker image to Google Artifact Registry
      - name: 'Publish'
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
          
      # Deploy the Docker image to the GKE cluster
      - name: 'Deploy to GKE'
        run: |
          # Fetch secrets from Google Cloud Secret Manager
          export FINERACT_DEFAULT_TENANTDB_IDENTIFIER_TEST=$(gcloud secrets versions access latest --secret=FINERACT_DEFAULT_TENANTDB_IDENTIFIER_TEST)
          export FINERACT_DEFAULT_TENANTDB_NAME_TEST=$(gcloud secrets versions access latest --secret=FINERACT_DEFAULT_TENANTDB_NAME_TEST)
          export FINERACT_HIKARI_PASSWORD_TEST=$(gcloud secrets versions access latest --secret=FINERACT_HIKARI_PASSWORD_TEST)
          export FINERACT_HIKARI_USERNAME_TEST=$(gcloud secrets versions access latest --secret=FINERACT_HIKARI_USERNAME_TEST)
          export FINERACT_DEFAULT_TENANTDB_HOSTNAME_TEST=$(gcloud secrets versions access 4 --secret=FINERACT_DEFAULT_TENANTDB_HOSTNAME_TEST)
        
          # Add Helm repo if needed (adjust to your Helm chart repository)
          helm repo add camunda-platform https://helm.camunda.io
          helm repo add elastic http://helm.elastic.co
          helm repo add kibana http://helm.elastic.co
          helm repo add mysql https://charts.bitnami.com/bitnami
          helm repo add kong https://charts.konghq.com
          helm repo add keycloak https://codecentric.github.io/helm-charts
          helm repo add redis https://charts.bitnami.com/bitnami
          #helm repo add jetstack https://charts.jetstack.io
        
        
          helm repo update
  
          helm upgrade -f helm/fineract/values.yaml ph-ee-backend helm/fineract/ \
          --install --namespace ${NAMESPACE} \
          --set fineract.image=${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA} \
          --set fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_IDENTIFIER=${FINERACT_DEFAULT_TENANTDB_IDENTIFIER_TEST} \
          --set fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_NAME=${FINERACT_DEFAULT_TENANTDB_NAME_TEST} \
          --set fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_HOSTNAME=${FINERACT_DEFAULT_TENANTDB_HOSTNAME_TEST} \
          --set fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_PWD=${FINERACT_HIKARI_PASSWORD_TEST} \
          --set fineract.spec.template.spec.containers.env.FINERACT_HIKARI_PASSWORD=${FINERACT_HIKARI_PASSWORD_TEST} \
          --set fineract.spec.template.spec.containers.env.FINERACT_HIKARI_USERNAME=${FINERACT_HIKARI_USERNAME_TEST} \
          --set fineract.spec.template.spec.containers.env.FINERACT_ADMIN_USERNAME=${FINERACT_HIKARI_USERNAME_TEST}
